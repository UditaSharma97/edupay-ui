{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/uditasharma/React Projects/edupay-ui/src/screens/SignInScreen copy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AsyncStorage } from 'AsyncStorage';\nimport InputComponent from '../components/InputComponent';\nimport ButtonActionComponent from '../components/ButtonActionComponent';\nimport TextComponent from '../components/TextComponent';\nimport ApiConnect from '../connections/ApiConnect';\nimport styles from '../appStyles.module.css';\nimport { USERNAME_REQUIRED_TEXT, PASSWORD_REQUIRED_TEXT, HOME_SCREEN, USERNAME_PLACEHOLDER_TEXT, PASSWORD_PLACEHOLDER_TEXT, SIGN_IN_TEXT, NEW_PROFILE_TEXT, JOIN_NOW_TEXT, JOIN_NOW_SCREEN, SOME_ERROR_OCCURED_TEXT } from '../constants/StringConstants';\n/*import {APP_LOGO_PATH} from '../constants/ResourceConstants';\n\nconst SignInScreen= ({navigation})=> {\n\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [userNameError, setUserNameError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [responseError, setResponseError]= useState('');\n\n  ///////////////////////////////////////////////////// Validation Logic Start\n  const validateCredentials= async()=> {\n    setUserNameError('');\n    setPasswordError('');\n    setResponseError('');\n\n    if(!userName){\n      setUserNameError(USERNAME_REQUIRED_TEXT);\n    }\n    else if(!password){\n      setPasswordError(PASSWORD_REQUIRED_TEXT);\n    }\n    else if(userName && password){\n      await ApiConnect.post('/signIn', {userName, password})\n                      .then(async(result)=> {\n                            const response= result.data;\n                                           //console.log(response);\n                            if(response.token){\n                               await AsyncStorage.setItem('TOKEN', response.token);\n                               //Toast.show(response.message, Toast.SHORT);\n                               navigation.navigate(HOME_SCREEN);\n                            }\n                            else{\n                               setResponseError(response.message);\n                            }\n                       })\n                      .catch((error)=> setResponseError(SOME_ERROR_OCCURED_TEXT));\n    }\n  }\n  ///////////////////////////////////////////////////// Validation Logic End\n  return (\n    <div className= {styles.viewStyle}>\n      <img\n        className= {styles.imageStyle}\n        //source= {require('../resources/AppLogo.png')}\n      />\n      <InputComponent\n        placeholderText= {`${USERNAME_PLACEHOLDER_TEXT}`}\n        padding= {10}\n        borderWidth= {3}\n        borderColor= 'black'\n        fontSize= {20}\n        onChangeText= {(userName)=> {\n                        setResponseError('');\n                        setUserName(userName);\n                      }}\n      />\n      {userNameError && !userName ?\n        <h1 className= {styles.errorTextStyle}>\n          {userNameError}\n        </h1>\n          : null\n      }\n      <InputComponent\n        placeholderText= {`${PASSWORD_PLACEHOLDER_TEXT}`}\n        padding= {10}\n        borderWidth= {3}\n        borderColor= 'black'\n        fontSize= {20}\n        isHiddenText\n        onChangeText= {(password)=> {\n                        setResponseError('');\n                        setPassword(password);\n                      }}\n      />\n      {passwordError && !password ?\n        <h1 className= {styles.errorTextStyle}>\n          {passwordError}\n        </h1>\n          : null\n      }\n      <ButtonActionComponent\n        buttonTitle= {`${SIGN_IN_TEXT}`}\n        onPress= {validateCredentials}\n        buttonColor= 'rgb(204, 204, 255)'\n        marginTop= {30}\n        marginLeft= {50}\n        marginRight= {50}\n        marginBottom= {20}\n      />\n      {responseError ?\n        <h1 classsname={styles.errorTextStyle} \n        //style= {{alignSelf: 'center', marginLeft: '15%', marginBottom: '5%'}}\n        >\n          {responseError}\n        </h1>\n          : null\n      }\n      <TextComponent\n        displayText= {`${NEW_PROFILE_TEXT}`}\n        navigationText= {`${JOIN_NOW_TEXT}`}\n        onPress= {()=> navigation.navigate(JOIN_NOW_SCREEN)}\n      />\n    </div>\n  )\n}\nSignInScreen.navigationOptions= ()=> {\n  return {\n    title: SIGN_IN_TEXT,\n    header: ()=> false\n  };\n};\n\nexport default SignInScreen;//withNavigation(SignInScreen);*/\n\nconst SignInScreen = () => {\n  _s();\n\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [userNameError, setUserNameError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [responseError, setResponseError] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Udi\", /*#__PURE__*/_jsxDEV(InputComponent, {\n      placeholderText: `${USERNAME_PLACEHOLDER_TEXT}`,\n      padding: 10,\n      borderWidth: 3,\n      borderColor: \"black\",\n      fontSize: 20,\n      onChangeText: userName => {\n        setResponseError('');\n        setUserName(userName);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SignInScreen, \"E8+PXAdYyOD6xQCZAPZfqjYvydQ=\");\n\n_c = SignInScreen;\nexport default SignInScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInScreen\");","map":{"version":3,"sources":["/Users/uditasharma/React Projects/edupay-ui/src/screens/SignInScreen copy.js"],"names":["React","useState","AsyncStorage","InputComponent","ButtonActionComponent","TextComponent","ApiConnect","styles","USERNAME_REQUIRED_TEXT","PASSWORD_REQUIRED_TEXT","HOME_SCREEN","USERNAME_PLACEHOLDER_TEXT","PASSWORD_PLACEHOLDER_TEXT","SIGN_IN_TEXT","NEW_PROFILE_TEXT","JOIN_NOW_TEXT","JOIN_NOW_SCREEN","SOME_ERROR_OCCURED_TEXT","SignInScreen","userName","setUserName","password","setPassword","userNameError","setUserNameError","passwordError","setPasswordError","responseError","setResponseError"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAAQC,sBAAR,EAAgCC,sBAAhC,EACQC,WADR,EACqBC,yBADrB,EAEQC,yBAFR,EAEmCC,YAFnC,EAGQC,gBAHR,EAG0BC,aAH1B,EAIQC,eAJR,EAIyBC,uBAJzB,QAKa,8BALbvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACsB,aAAD,EAAgBC,gBAAhB,IAAoCvB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACwB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAAC0B,aAAD,EAAgBC,gBAAhB,IAAmC3B,QAAQ,CAAC,EAAD,CAAjD;AAEA,sBACA;AAAA,mCAEF,QAAC,cAAD;AACQ,MAAA,eAAe,EAAI,GAAEU,yBAA0B,EADvD;AAEQ,MAAA,OAAO,EAAG,EAFlB;AAGQ,MAAA,WAAW,EAAG,CAHtB;AAIQ,MAAA,WAAW,EAAE,OAJrB;AAKQ,MAAA,QAAQ,EAAG,EALnB;AAMQ,MAAA,YAAY,EAAIQ,QAAD,IAAa;AACZS,QAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAR,QAAAA,WAAW,CAACD,QAAD,CAAX;AACD;AATvB;AAAA;AAAA;AAAA;AAAA,YAFE;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAgBD,CAvBD;;GAAMD,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import React, {useState} from 'react';\nimport { AsyncStorage } from 'AsyncStorage';\nimport InputComponent from '../components/InputComponent';\nimport ButtonActionComponent from '../components/ButtonActionComponent';\nimport TextComponent from '../components/TextComponent';\nimport ApiConnect from '../connections/ApiConnect';\nimport styles from '../appStyles.module.css';\nimport {USERNAME_REQUIRED_TEXT, PASSWORD_REQUIRED_TEXT,\n        HOME_SCREEN, USERNAME_PLACEHOLDER_TEXT,\n        PASSWORD_PLACEHOLDER_TEXT, SIGN_IN_TEXT,\n        NEW_PROFILE_TEXT, JOIN_NOW_TEXT,\n        JOIN_NOW_SCREEN, SOME_ERROR_OCCURED_TEXT\n      } from '../constants/StringConstants';\n/*import {APP_LOGO_PATH} from '../constants/ResourceConstants';\n\nconst SignInScreen= ({navigation})=> {\n\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [userNameError, setUserNameError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [responseError, setResponseError]= useState('');\n\n  ///////////////////////////////////////////////////// Validation Logic Start\n  const validateCredentials= async()=> {\n    setUserNameError('');\n    setPasswordError('');\n    setResponseError('');\n\n    if(!userName){\n      setUserNameError(USERNAME_REQUIRED_TEXT);\n    }\n    else if(!password){\n      setPasswordError(PASSWORD_REQUIRED_TEXT);\n    }\n    else if(userName && password){\n      await ApiConnect.post('/signIn', {userName, password})\n                      .then(async(result)=> {\n                            const response= result.data;\n                                           //console.log(response);\n                            if(response.token){\n                               await AsyncStorage.setItem('TOKEN', response.token);\n                               //Toast.show(response.message, Toast.SHORT);\n                               navigation.navigate(HOME_SCREEN);\n                            }\n                            else{\n                               setResponseError(response.message);\n                            }\n                       })\n                      .catch((error)=> setResponseError(SOME_ERROR_OCCURED_TEXT));\n    }\n  }\n  ///////////////////////////////////////////////////// Validation Logic End\n  return (\n    <div className= {styles.viewStyle}>\n      <img\n        className= {styles.imageStyle}\n        //source= {require('../resources/AppLogo.png')}\n      />\n      <InputComponent\n        placeholderText= {`${USERNAME_PLACEHOLDER_TEXT}`}\n        padding= {10}\n        borderWidth= {3}\n        borderColor= 'black'\n        fontSize= {20}\n        onChangeText= {(userName)=> {\n                        setResponseError('');\n                        setUserName(userName);\n                      }}\n      />\n      {userNameError && !userName ?\n        <h1 className= {styles.errorTextStyle}>\n          {userNameError}\n        </h1>\n          : null\n      }\n      <InputComponent\n        placeholderText= {`${PASSWORD_PLACEHOLDER_TEXT}`}\n        padding= {10}\n        borderWidth= {3}\n        borderColor= 'black'\n        fontSize= {20}\n        isHiddenText\n        onChangeText= {(password)=> {\n                        setResponseError('');\n                        setPassword(password);\n                      }}\n      />\n      {passwordError && !password ?\n        <h1 className= {styles.errorTextStyle}>\n          {passwordError}\n        </h1>\n          : null\n      }\n      <ButtonActionComponent\n        buttonTitle= {`${SIGN_IN_TEXT}`}\n        onPress= {validateCredentials}\n        buttonColor= 'rgb(204, 204, 255)'\n        marginTop= {30}\n        marginLeft= {50}\n        marginRight= {50}\n        marginBottom= {20}\n      />\n      {responseError ?\n        <h1 classsname={styles.errorTextStyle} \n        //style= {{alignSelf: 'center', marginLeft: '15%', marginBottom: '5%'}}\n        >\n          {responseError}\n        </h1>\n          : null\n      }\n      <TextComponent\n        displayText= {`${NEW_PROFILE_TEXT}`}\n        navigationText= {`${JOIN_NOW_TEXT}`}\n        onPress= {()=> navigation.navigate(JOIN_NOW_SCREEN)}\n      />\n    </div>\n  )\n}\nSignInScreen.navigationOptions= ()=> {\n  return {\n    title: SIGN_IN_TEXT,\n    header: ()=> false\n  };\n};\n\nexport default SignInScreen;//withNavigation(SignInScreen);*/\n\nconst SignInScreen= ()=> {\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [userNameError, setUserNameError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [responseError, setResponseError]= useState('');\n\n  return(\n  <div>\nUdi\n<InputComponent\n        placeholderText= {`${USERNAME_PLACEHOLDER_TEXT}`}\n        padding= {10}\n        borderWidth= {3}\n        borderColor= 'black'\n        fontSize= {20}\n        onChangeText= {(userName)=> {\n                        setResponseError('');\n                        setUserName(userName);\n                      }}\n      />\n  </div>\n)\n}\nexport default SignInScreen;"]},"metadata":{},"sourceType":"module"}